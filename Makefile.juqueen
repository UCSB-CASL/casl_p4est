# This is a sample Makefile for compiling CASL_P4EST examples. It is mainly useful
# for use on TACC clusters but should be simple to adapt to other enviroments. It
# has been written by hand! to minmize any dependency which comes at the price of
# flexibility. A better option would be CMake or qmake but not all supercomputers
# provide them (Stampede actually has both ... so you know, use them if you want!)

# To use this, you need to set a couple of parameters:
# 1) Either compiler your own petsc and set PETSC_DIR or use system-provided petsc
# 2) Compile p4est and set P4EST_DIR enviroment variable to point to installation
# 3) CASL_P4EST: set below. This points to the git repository. It can either be 
# an absolute path or, like below, relative to the current directory in which you 
# are invoking make.
# 4) SRCS and CSRCS: Use these two variables below to set the files that need to be 
# compiled for your current example. You could potentially put this in common.mkl and 
# compile everything but compilation on clusters are sometimes slow and annoying ...
# 5) build_type: either release or debug. Notice that this has no effect in choosing
# proper PETSc or P4EST lib. 
# 6) COMPILER_DEFINES: use these to define macros to the compiler
# 
# The rest of the Makefile should either be simple to follow or obscure enough to
# to discourage you from reading. After all this is make!
#
# Author: Mohammad Mirzadeh
# Date: 09-26-2013

# Set the name of executable and its folder
BIN_NAME   = BINARY_NAME_GOES_HERE
BIN_FOLDER = .

# Define the location for the CASL library 
CASL_P4EST = ../..
INCLUDE_FLAGS += -I$(CASL_P4EST)

# Project info
vpath %.cpp $(CASL_P4EST)/examples/parallel_levelset
SRCS += main.cpp

vpath %.cpp $(CASL_P4EST)/src
SRCS += utils.cpp \
	refine_coarsen.cpp \
	my_p4est_quad_neighbor_nodes_of_node.cpp \
	my_p4est_hierarchy.cpp \
	my_p4est_node_neighbors.cpp \
	interpolating_function.cpp \
	petsc_logging.cpp \
	interpolating_function.cpp \
	cube2.cpp \
	simplex2.cpp \
	point2.cpp \
	CASL_math.cpp \
	semi_lagrangian.cpp \
	my_p4est_log_wrappers.cpp \
	my_p4est_levelset.cpp \
	Parser.cpp

vpath %.c $(CASL_P4EST)/src
CSRCS += my_p4est_vtk.c \
	my_p4est_tools.c \
	my_p4est_nodes.c 

# Cluster setting; may set one of these to YES.
TACC_CLUSTER = NO
BGQ_CLUSTER = YES

# What build type to use? __MUST__ either be 'debug' or 'release'
BUILD_TYPE = release

# compiler options:
# CXX_COMPILER_TYPE:
#   This variable is used to set correct flags for the compiler;
#   it can be GNU (for g++), INTEL (for icpc), or BGQ.
# CXX_USE_MPI_COMPILER:
#   This variable is used to determine whether MPI should be used
CXX_COMPILER_TYPE    = BGQ
CXX_DEFINES          = -DCASL_THROWS -DCASL_LOG_EVENTS
CXX_EXTRA_FLAGS      = 

# Verbose control
PRINT_WARNINGS    = NO
PRINT_MAKE_OUTPUT = NO

# Where to put all temporary objets?
TEMP_OBJS_DIR      = objs

# Use any external libraries?
WITH_OPENMP   = NO

include $(CASL_P4EST)/common.mk

OBJS := $(patsubst %.cpp, $(TEMP_OBJS_DIR)/%.o,$(SRCS)) \
	$(patsubst %.c, $(TEMP_OBJS_DIR)/%.o,$(CSRCS))

DEPS := $(patsubst %.cpp, $(TEMP_OBJS_DIR)/.%.d,$(SRCS)) \
	$(patsubst %.c, $(TEMP_OBJS_DIR)/.%.d,$(CSRCS))

.PHONY: all
.DEFAULT_GOAL:=all
all:
	@echo	" ============== Build information =============== "
	@echo   " Build type          = $(BUILD_TYPE) "
	@echo   " CXX compiler type   = $(CXX_COMPILER_TYPE) " 
	@echo   " CXX compiler called = $(CXX_FULL_PATH)"
	@echo   " Compiler flags      = $(CXX_FLAGS)" 
	@echo   " Include path        = $(INCLUDE_FLAGS)" 
	@echo   ""
	@echo   " Using external library PETSc:"
	@echo   "    PETSC_DIR  = $(PETSC_DIR)"
	@echo   "    PETSC_ARCH = $(PETSC_ARCH)"
	@echo	"    PETSC_LIBS = $(PETSC_LIB)"
	@echo   ""
	@echo   " Using external library p4est:"
	@echo   "    P4EST_DIR  = $(P4EST_DIR)"
	@echo	"    P4EST_LIBS = $(P4EST_LIBS)"
	@echo   ""
	@echo	" =========== Building process started =========== "
	@$(MKDIR) $(TEMP_OBJS_DIR)
	@$(MAKE)  $(OBJS)
	@$(MKDIR) $(BIN_FOLDER)
	@$(MAKE)  $(BIN_NAME)
	@echo	" ===================== done ===================== "

-include $(DEPS)

$(TEMP_OBJS_DIR)/%.o: %.cpp
	@echo " building $(@F) ..."
	$(MPICXX) -c $(CXX_FLAGS) $(INCLUDE_FLAGS) -MMD $< -o $@
	@mv $(TEMP_OBJS_DIR)/$*.d $(TEMP_OBJS_DIR)/.$*.d

$(TEMP_OBJS_DIR)/%.o: %.c
	@echo " building $(@F) ..."
	$(MPICXX) -c $(CXX_FLAGS) $(INCLUDE_FLAGS) -MMD $< -o $@
	@mv $(TEMP_OBJS_DIR)/$*.d $(TEMP_OBJS_DIR)/.$*.d

$(BIN_NAME): $(OBJS)
	@echo " linking $(@F) ..."
	$(MPICC) $(LINK_FLAGS) $^ $(LINK_LIBS) -o $(BIN_FOLDER)/$(BIN_NAME)

.PHONY: clean
clean::
	@$(RM) $(TEMP_OBJS_DIR) $(BIN_FOLDER)/$(BIN_NAME)

.PHONY: cleandata
cleandata::
	@$(RM) $(BIN_FOLDER)/*.vtu $(BIN_FOLDER)/*.pvtu $(BIN_FOLDER)/*.vtk $(BIN_FOLDER)/*.dat $(BIN_FOLDER)/*.bin $(BIN_FOLDER)/*.xmf $(BIN_FOLDER)/*.visit

.PHONY: cleanall
cleanall::
	@$(RM) $(TEMP_OBJS_DIR) $(BIN_FOLDER)/$(BIN_NAME) $(BIN_FOLDER)/*.vtu $(BIN_FOLDER)/*.xmf $(BIN_FOLDER)/*.hvy $(BIN_FOLDER)/*.pvtu $(BIN_FOLDER)/*.vtk $(BIN_FOLDER)/*.bin $(BIN_FODLER)/*.visit

