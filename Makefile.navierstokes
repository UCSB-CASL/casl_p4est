####### Compiler, tools and options

build = 3d
debug = 1
log = 0
stampede = 0
juqueen = 0

# This Makefile requires the following environment variables:
#
# CASL_P4EST        Toplevel directory of source
# P4EST_DIR         Where p4est is make installed
# PETSC_INC         Header files of petsc
# PETSC_LIB         The libpetsc.* files
# VOROPP_DIR        Where libvoro++ is make installed

# On JUQUEEN it is important to module load petsc/3.6.0_downloads_O3strict.
#            It is also advised to compile p4est and export P4EST_DIR accordingly,
#            since this provides the BGQ-specific compiler flags from the p4est build.
#            Export CASL_P4EST to point to the casl_p4est source directory.

# hack to pass NULL as first parameter to PetscOptionsSetValue if set to 1
# to use the JUQUEEN petsc version 3.6 this must be 0
petscoptions = 0

ifeq ($(build), 2d)
	OBJDIR = .obj_2d
	TARGET = p4est_navier_stokes_2d
else
	OBJDIR = .obj_3d
	TARGET = p4est_navier_stokes_3d
endif

# only set these variables if P4EST_DIR is not defined in the environment
ifeq ($(origin P4EST_DIR), undefined)

        # don't go here; define P4EST_DIR

	CFLAGS_DEBUG = -g -O0
	CFLAGS_OPTIM = -O2

	ifeq ($(debug),1)
		CFLAGS += $(CFLAGS_DEBUG) 
		CXXFLAGS += $(CFLAGS_DEBUG) 
		P4EST_ARCH = debug
	else
		CFLAGS += $(CFLAGS_OPTIM)
		CXXFLAGS += $(CFLAGS_OPTIM)
		P4EST_ARCH = release
	endif

	#P4EST_DIR=/work/02673/guittet/softwares/build/p4est_mvapich2/release
	P4EST_DIR=/work/02673/guittet/softwares/build/p4est_git/$(P4EST_ARCH)

	# p4est
	INCPATH += -I$(P4EST_DIR)/include
	LIBS += -Wl,-rpath,$(P4EST_DIR)/lib -L$(P4EST_DIR)/lib -lp4est -lsc

else
	#echo "Use installed p4est from $(P4EST_DIR)"

	include $(P4EST_DIR)/etc/Makefile.p4est.mk
	CFLAGS += $(P4EST_CFLAGS)
	CXXFLAGS += $(P4EST_CFLAGS)

	INCPATH += $(P4EST_CPPFLAGS)
	LIBS += $(P4EST_LDFLAGS) $(P4EST_LIBS)
endif

ifeq ($(log),1)
	CFLAGS += -DCASL_LOG_EVENTS
	CXXFLAGS += -DCASL_LOG_EVENTS
endif

# petsc
ifeq ($(juqueen), 0)
	#INCPATH += -I$(PETSC_DIR)/include -I$(PETSC_DIR)/sandybridge-cxx/include
	#LIBS += -Wl,-rpath,$(PETSC_DIR)/sandybridge-cxx/lib -L$(PETSC_DIR)/sandybridge-cxx/lib -lpetsc
	#INCPATH += -I$(PETSC_DIR)/include
	#LIBS += -Wl,-rpath,$(PETSC_DIR)/lib -L$(PETSC_DIR)/lib -lpetsc
	INCPATH += -I$(PETSC_INC)
	LIBS += -L$(PETSC_LIB) -lpetsc
else
	include $(PETSC_DIR)/lib/petsc/conf/variables
	include $(PETSC_DIR)/lib/petsc/conf/rules
	INCPATH += $(PETSC_CC_INCLUDES)
	LIBS += $(PETSC_LIB)
endif

# casl p4est
ifeq ($(origin CASL_P4EST), undefined)
        # don't go here; define CASL_P4EST
	CASL_P4EST = /home/foobar/work/casl_p4est
endif
INCPATH += -I$(CASL_P4EST)

# casl library -- it seems this is outdated and only referenced in 2D (if even?)
# CASL_DIR =/work/02673/guittet/code/casl_library

# Voro++
ifeq ($(origin VOROPP_DIR), undefined)
        # don't go here; define VOROPP_DIR
	LIBS += -L/work/02673/guittet/softwares/build/voro++/lib -lvoro++
	INCPATH += -I/work/02673/guittet/softwares/build/voro++/include/voro++
else
	#echo "Use installed Voro++ library from $(VOROPP_DIR)"
	LIBS += -L$(VOROPP_DIR)/lib -lvoro++
	INCPATH += -I$(VOROPP_DIR)/include/voro++
endif

# extra flags for the Stampede computer
ifeq ($(stampede), 1)
	CFLAGS += -DSTAMPEDE
	CXXFLAGS += -DSTAMPEDE
endif

ifeq ($(petscoptions), 1)
	CFLAGS += -DCASL_PETSC_OPTIONS
	CXXFLAGS += -DCASL_PETSC_OPTIONS
endif

ifeq ($(juqueen), 0)
	ifeq ($(debug), 0)
		CC = @echo compiling $< && mpicc
		CXX = @echo compiling $< && mpicxx
		LINK = @echo linking $@ && mpicxx
	else
		CC = mpicc
		CXX = mpicxx
		LINK = mpicxx
	endif
else
	INCPATH += -DCASL_JUQUEEN
	CC = mpixlc_r
	CXX = mpixlcxx_r
	LINK = mpixlcxx_r
endif

vpath %.c   $(CASL_P4EST)/src
vpath %.cpp $(CASL_P4EST)/src
vpath %.cpp $(CASL_P4EST)/examples/navier_stokes

####### Files
ifeq ($(build),2d)
	INCPATH += -I$(CASL_DIR)
	SOURCES += \
    $(CASL_P4EST)/examples/navier_stokes/main_navier_stokes_2d.cpp \
    $(CASL_P4EST)/src/my_p4est_utils.cpp \
    $(CASL_P4EST)/src/my_p4est_refine_coarsen.cpp \
    $(CASL_P4EST)/src/my_p4est_vtk.c \
    $(CASL_P4EST)/src/my_p4est_tools.c\
    $(CASL_P4EST)/src/my_p4est_nodes.c \
    $(CASL_P4EST)/src/my_p4est_interpolation.cpp \
    $(CASL_P4EST)/src/my_p4est_interpolation_nodes.cpp \
    $(CASL_P4EST)/src/my_p4est_interpolation_cells.cpp \
    $(CASL_P4EST)/src/my_p4est_interpolation_faces.cpp \
    $(CASL_P4EST)/src/my_p4est_level_set.cpp \
    $(CASL_P4EST)/src/my_p4est_level_set_cells.cpp \
    $(CASL_P4EST)/src/my_p4est_level_set_faces.cpp \
    $(CASL_P4EST)/src/cube2.cpp \
    $(CASL_P4EST)/src/point2.cpp \
    $(CASL_P4EST)/src/simplex2.cpp \
    $(CASL_P4EST)/src/voronoi2D.cpp \
    $(CASL_P4EST)/src/matrix.cpp \
    $(CASL_P4EST)/src/my_p4est_solve_lsqr.cpp \
    $(CASL_P4EST)/src/my_p4est_hierarchy.cpp \
    $(CASL_P4EST)/src/my_p4est_cell_neighbors.cpp \
    $(CASL_P4EST)/src/my_p4est_node_neighbors.cpp \
    $(CASL_P4EST)/src/my_p4est_quad_neighbor_nodes_of_node.cpp \
    $(CASL_P4EST)/src/my_p4est_log_wrappers.c \
    $(CASL_P4EST)/src/petsc_logging.cpp \
    $(CASL_P4EST)/src/Parser.cpp \
    $(CASL_P4EST)/src/math.cpp \
    $(CASL_P4EST)/src/my_p4est_faces.cpp \
    $(CASL_P4EST)/src/my_p4est_poisson_cells.cpp \
    $(CASL_P4EST)/src/my_p4est_poisson_faces.cpp \
    $(CASL_P4EST)/src/my_p4est_trajectory_of_point.cpp \
    $(CASL_P4EST)/src/my_p4est_navier_stokes.cpp

	# CASL_Library files
	SOURCES += \
		$(CASL_DIR)/lib/tools/CASL_math.cpp \
		$(CASL_DIR)/lib/tools/CASL_types.cpp \
		$(CASL_DIR)/lib/geometry/Point2.cpp \
		$(CASL_DIR)/lib/geometry/Cube2.cpp \
		$(CASL_DIR)/lib/geometry/Simplex2.cpp \
		$(CASL_DIR)/lib/arrays/ArrayV.cpp \
		$(CASL_DIR)/lib/algebra/MatrixFull.cpp \
		$(CASL_DIR)/lib/algebra/SparseMatrix.cpp \
		$(CASL_DIR)/lib/algebra/SparseMatrix_CRS.cpp \
		$(CASL_DIR)/lib/algebra/Cholesky.cpp \
		$(CASL_DIR)/lib/amr/QuadCell.cpp \
		$(CASL_DIR)/lib/amr/QuadTree.cpp \
		$(CASL_DIR)/lib/amr/QuadNgbdNodesOfNode.cpp \
		$(CASL_DIR)/lib/tools/QuadTreeToolbox.cpp \
		$(CASL_DIR)/lib/tools/QuadraticInterpolationOnQuadTree.cpp

else

#		LIBS += -L/work/02673/guittet/softwares/build/voro++/lib -lvoro++
#		INCPATH += -I/work/02673/guittet/softwares/build/voro++/include/voro++
#    $$CASL_P4EST/examples/navier_stokes/main_navier_stokes_scaling_3d.cpp
#    $$CASL_P4EST/examples/faces/main_timing_faces_3d.cpp
	SOURCES += \
    $(CASL_P4EST)/examples/navier_stokes/main_navier_stokes_3d.cpp \
    $(CASL_P4EST)/src/my_p8est_utils.cpp \
    $(CASL_P4EST)/src/my_p8est_refine_coarsen.cpp \
    $(CASL_P4EST)/src/my_p8est_vtk.c \
    $(CASL_P4EST)/src/my_p8est_tools.c\
    $(CASL_P4EST)/src/my_p8est_nodes.c \
    $(CASL_P4EST)/src/my_p8est_interpolation.cpp \
    $(CASL_P4EST)/src/my_p8est_interpolation_nodes.cpp \
    $(CASL_P4EST)/src/my_p8est_interpolation_cells.cpp \
    $(CASL_P4EST)/src/my_p8est_interpolation_faces.cpp \
    $(CASL_P4EST)/src/my_p8est_level_set.cpp \
    $(CASL_P4EST)/src/my_p8est_level_set_cells.cpp \
    $(CASL_P4EST)/src/my_p8est_level_set_faces.cpp \
    $(CASL_P4EST)/src/cube2.cpp \
    $(CASL_P4EST)/src/cube3.cpp \
    $(CASL_P4EST)/src/point2.cpp \
    $(CASL_P4EST)/src/point3.cpp \
    $(CASL_P4EST)/src/simplex2.cpp \
    $(CASL_P4EST)/src/voronoi3D.cpp \
    $(CASL_P4EST)/src/matrix.cpp \
    $(CASL_P4EST)/src/my_p8est_solve_lsqr.cpp \
    $(CASL_P4EST)/src/my_p8est_hierarchy.cpp \
    $(CASL_P4EST)/src/my_p8est_cell_neighbors.cpp \
    $(CASL_P4EST)/src/my_p8est_node_neighbors.cpp \
    $(CASL_P4EST)/src/my_p8est_quad_neighbor_nodes_of_node.cpp \
    $(CASL_P4EST)/src/my_p8est_log_wrappers.c \
    $(CASL_P4EST)/src/petsc_logging.cpp \
    $(CASL_P4EST)/src/Parser.cpp \
    $(CASL_P4EST)/src/math.cpp \
    $(CASL_P4EST)/src/my_p8est_faces.cpp \
    $(CASL_P4EST)/src/my_p8est_poisson_cells.cpp \
    $(CASL_P4EST)/src/my_p8est_poisson_faces.cpp \
    $(CASL_P4EST)/src/my_p8est_trajectory_of_point.cpp \
    $(CASL_P4EST)/src/my_p8est_navier_stokes.cpp
endif

STRIP_SRC = $(notdir $(SOURCES))
OBJECTS = $(patsubst %.cpp, $(OBJDIR)/%.o, $(filter %.cpp, $(STRIP_SRC)))	$(patsubst %.c, $(OBJDIR)/%.o, $(filter %.c, $(STRIP_SRC)))

####### Implicit rules

$(OBJDIR)/%.o: %.cpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

$(OBJDIR)/%.o: %.c
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

.PHONY: all clean

#all: $(SOURCES) $(TARGET)
all: $(TARGET)

$(TARGET):  $(OBJECTS)
	$(LINK) -o $(TARGET) $(OBJECTS) $(LIBS) $(LFLAGS)

clean: 
	rm -rf $(OBJDIR)/*.o $(TARGET)
