#!/usr/bin/env bash

# creates a .pro file
# (In the following, EOF works as a delimiter for the text that needs to be copied as is to the .pro file)
function create_pro() {
cat > $1.pro << EOF
# --------------------------------------------------------------
# This is a qmake script for generating makefiles. Please read
# this short comment before changing this file.
#
# The build environment (specific paths to external libraries,
# compilers, etc.) needs to be fully determined in
# $(dirname "$PWD")/qmake/${CASL_P4EST_USER}.pri
#
# Some additional configuration settings can be defined here below
# with
#     CONFIG += "options"
# Available options are: (2d or 3d), (debug or release), log, profile, ...
# Regarding the (2d or 3d) and/or (debug or release) options, it is
# advised to configure separate build directories in the Qt configuration
# settings to avoid mismatch of incompatible and/or inconsistent object
# files...
#
# Otherwise, one can pass in the desired value to qmake, e.g. to create a
# Makefile for building with release and 2d:
#   qmake example.pro CONFIG+="2d release"
#
#   *** PLEASE DO NOT ADD CONFIG SCRIPTS TO THE REPOSITORY ***
#
# --------------------------------------------------------------

CASL_P4EST = $2

TARGET   = $1

CONFIG += # this(these) one(s) is(are) for the user to set!

include(\$\$CASL_P4EST/qmake/${CASL_P4EST_USER}.pri) # file containing paths to external libraries (PETSc, p4est, voro++, boost, matlab, mpi)
include(\$\$CASL_P4EST/qmake/common.pri) # linking libraries and setting common for all project parameters
include(\$\$CASL_P4EST/examples/$1/$1.pri) # list of files for this particular project

EOF
}

# creates a .pri file
# (In the following, EOF works as a delimiter for the text that needs to be copied as is to the .pri file)
function create_pri() {
cat > $1.pri << EOF

CONFIG(2d, 2d|3d): {
  SOURCES += main_2d.cpp
}

CONFIG(3d, 2d|3d): {
  SOURCES += main_3d.cpp
}

include(../../qmake/libparcasl.pri)

EOF
}


# creates a bare minimum example
# (In the following, EOF works as a delimiter for the text that needs to be copied as is to the main file)

# creates a bare minimum main_2d.cpp and main_3d.cpp
function create_dummy_main() {
cat > $1/main_2d.cpp << EOF
/*
 * Title: $1
 * Description:
 * Author: $(git config user.name)
 * Date Created: $(date +%m-%d-%Y)
 */

#ifndef P4_TO_P8
#include <src/my_p4est_utils.h>
#include <src/my_p4est_vtk.h>
#include <src/my_p4est_nodes.h>
#include <src/my_p4est_tools.h>
#include <src/my_p4est_refine_coarsen.h>
#include <src/my_p4est_log_wrappers.h>
#include <src/my_p4est_node_neighbors.h>
#include <src/my_p4est_macros.h>
#else
#include <src/my_p8est_utils.h>
#include <src/my_p8est_vtk.h>
#include <src/my_p8est_nodes.h>
#include <src/my_p8est_tools.h>
#include <src/my_p8est_refine_coarsen.h>
#include <src/my_p8est_log_wrappers.h>
#include <src/my_p8est_node_neighbors.h>
#include <src/my_p8est_macros.h>
#endif

#include <src/Parser.h>
#include <src/casl_math.h>

using namespace std;

int main(int argc, char** argv) {

  // prepare parallel enviroment
  mpi_environment_t mpi;
  mpi.init(argc, argv);

  // stopwatch
  parStopWatch w;
  w.start("Running example: $1");

  // p4est variables
  p4est_t*              p4est;
  p4est_nodes_t*        nodes;
  p4est_ghost_t*        ghost;
  p4est_connectivity_t* conn;
  my_p4est_brick_t      brick;

  // domain size information
  const int n_xyz[]      = { 1,  1,  1};
  const double xyz_min[] = {-1, -1, -1};
  const double xyz_max[] = { 1,  1,  1};
  const int periodic[]   = { 0,  0,  0};
  conn = my_p4est_brick_new(n_xyz, xyz_min, xyz_max, &brick, periodic);

  // create the forest
  p4est = my_p4est_new(mpi.comm(), conn, 0, NULL, NULL);

  // refine based on distance to a level-set
#ifdef P4_TO_P8
  struct:CF_3{
    double operator()(double x, double y, double z) const {
      return 0.5 - sqrt(SQR(x) + SQR(y) + SQR(z));
    }
  } circle;
#else
  struct:CF_2{
    double operator()(double x, double y) const {
      return 0.5 - sqrt(SQR(x) + SQR(y));
    }
  } circle;
#endif

  splitting_criteria_cf_t sp(3, 8, &circle);
  p4est->user_pointer = &sp;
  my_p4est_refine(p4est, P4EST_TRUE, refine_levelset_cf, NULL);

  // partition the forest
  my_p4est_partition(p4est, P4EST_TRUE, NULL);

  // create ghost layer
  ghost = my_p4est_ghost_new(p4est, P4EST_CONNECT_FULL);

  // create node structure
  nodes = my_p4est_nodes_new(p4est, ghost);

  // save the grid into vtk
  my_p4est_vtk_write_all(p4est, nodes, ghost,
                         P4EST_TRUE, P4EST_TRUE,
                         0, 0, "$1");

  // destroy the structures
  p4est_nodes_destroy(nodes);
  p4est_ghost_destroy(ghost);
  p4est_destroy      (p4est);
  my_p4est_brick_destroy(conn, &brick);

  w.stop(); w.read_duration();
}

EOF

cat > $1/main_3d.cpp << EOF
#include <src/my_p4est_to_p8est.h>
#include "main_2d.cpp"

EOF
}

help="-- Use this script to a new example and/or a new .pro file --

usage:
    ./$(basename "$0") example_name
  to be executed in the $(dirname "$PWD")/example directory

where:
    example_name is the name of the example whose creation/configuration is desired. If it does not
    exist, the example folder will be created, generic configuration files will be added and dummy
    main files will be created as well. If the example folder already exists, the script will create
    and add any missing configuration file(s) and it will create dummy main files if no main file is
    to be found in the existing directory.

The user needs to have defined the following environment variable
    CASL_P4EST_USER:  environment specifier
as it is required to create the corresponding qmake .pro file.

If not defined yet, define it by executing
export CASL_P4EST_USER=basename of the specific .pri file in $(dirname "$PWD")/qmake that defines
                       the specific build environment of your machine (specific paths to external
                       libaries, specific compilers, etc.). If it does not exist yet, create it
                       by executing ./new_environment in $(dirname "$PWD")/qmake .
"

if [ "$#" -ne 1 ] || [ "$1" == "-h" ] || [ "$1" == "-help" ]; then
    echo "$help"
    exit 1;
else
  name=$1

  # create a new example only if one does not exist with the same name
  if [ ! -e ${name} ] || { [ -e ${name} ] && [ ! -f ${name}/${name}.pro ]; } || { [ -e ${name} ] && [ ! "$(ls ${name}/main*.cpp 2>/dev/null)" ] ; }; then
    if [ ! -e ${name} ]; then
      echo "Creating directory ./${name}"
      mkdir ${name}
    fi
    if [ -e ${name} ] && [ ! -f ${name}/${name}.pro ]; then
      # we will need to create the .pro file, so we will need CASL_P4EST_USER to be defined
      CASL_P4EST_DIR="$(dirname "$PWD")"
      if [ ! -d ${CASL_P4EST_DIR} ]; then
        echo "The parent directory is not valid: are you sure you are running the script in the example folder of the casl_p4est repository?"
        exit 1
      fi
      if [ -z ${CASL_P4EST_USER} ]; then
        echo "ERROR: The environment variable CASL_P4EST_USER is undefined."
        echo "CASL_P4EST_USER needs to be defined and to refer to the basename of an environment-specific file in ${CASL_P4EST_DIR}/qmake."
        exit 1
      elif [ ! -d ${CASL_P4EST_DIR}/qmake ]; then
        echo "ERROR: the qmake directory ${CASL_P4EST_DIR}/qmake cannot be found..."
        echo "Are you sure CASL_P4EST_DIR=${CASL_P4EST_DIR} is correct?"
        exit 1
      elif [ ! -f ${CASL_P4EST_DIR}/qmake/${CASL_P4EST_USER}.pri ]; then
        echo "ERROR: the environment-specific file ${CASL_P4EST_DIR}/qmake/${CASL_P4EST_USER}.pri does not exist."
        echo "Please create it by executing ./new_environment in ${CASL_P4EST_DIR}/qmake, first."
        exit 1
      fi

      echo "Creating the .pro file."
      cd $name
      create_pro $name $CASL_P4EST_DIR

      if [ ! -e $name.pri ]; then
        create_pri $name
      else
        echo "The source list '$name.pri' already exists: please check if it is valid."
      fi
      cd ../
    fi
    if { [ -e ${name} ] && [ ! "$(ls ${name}/main*.cpp 2>/dev/null)" ] ;  }; then
      echo "No existing main file: creating dummy 2d and 3d main files."
      create_dummy_main ${name}
    fi
  else
    echo "ERROR: Example '${name}' already exists and is already fully configured. Please go ahead or choose another name."
    exit 1
  fi
fi


