#!/usr/bin/env bash

# creates a .pro file
# (In the following, EOF works as a delimiter for the text that needs to be copied as it to the .pri file)
function create_pro() {
cat > $1.pro << EOF
# --------------------------------------------------------------
# This is a qmake script for generating makefiles. Please read
# this short comment before changing this file. 
#
# The build environment (specific paths to external libraries,
# compilers, etc.) needs to be fully determined in
# $(dirname "$PWD")/qmake/${CASL_P4EST_USER}.pri
#
# Some additional configuration settings can be defined here below
# with
#     CONFIG += "options"
# Available options are: (2d or 3d), (debug or release), log, profile, ...
# Regarding the (2d or 3d) and/or (debug or release) options, it is
# advised to configure separate build directories in the Qt configuration
# settings to avoid mismatch of incompatible and/or inconsistent object
# files...
#
# Otherwise, one can pass in the desired value to qmake, e.g. to create a
# Makefile for building with release and 2d:
#   qmake example.pro CONFIG+="2d release"
#
#   *** PLEASE DO NOT ADD CONFIG SCRIPTS TO THE REPOSITORY ***
#
# --------------------------------------------------------------

CASL_P4EST = $2

TARGET   = $1

CONFIG += # this(these) one(s) is(are) for the user to set!

include(\$\$CASL_P4EST/qmake/${CASL_P4EST_USER}.pri) # file containing paths to external libraries (PETSc, p4est, voro++, boost, matlab, mpi)
include(\$\$CASL_P4EST/qmake/common.pri) # linking libraries and setting common for all project parameters
include(\$\$CASL_P4EST/examples/$1/$1.pri) # list of files for this particular project

EOF
}

function create_pri() {
cat > $1.pri << EOF

CONFIG(2d, 2d|3d): {
  SOURCES += main_2d.cpp
}

CONFIG(3d, 2d|3d): {
  SOURCES += main_3d.cpp
}

include(../../qmake/libparcasl.pri)

EOF
}


help="-- Use this script to generate a .pro file for an existing example --

usage:
    ./$(basename "$0") example_name
  to be executed in the $(dirname "$PWD")/example directory

where:
    example_name is the name of the example whose build is desired (the example folder must exist).

The user needs to have defined the following environment variable
    CASL_P4EST_USER:  environment specifier

If not defined yet, define it by executing
export CASL_P4EST_USER=basename of the specific .pri file in $(dirname "$PWD")/qmake that defines
                       the specific build environment of your machine (specific paths to external
                       libaries, specific compilers, etc.). If it does not exist yet, create it
                       by executing ./new_environment in $(dirname "$PWD")/qmake .
"


if [ "$#" -ne 1 ] || [ "$1" == "-h" ] || [ "$1" == "-help" ]; then
  echo "$help"
  exit 1;
else
  name=$1

  CASL_P4EST_DIR="$(dirname "$PWD")"
  if [[ ! -d "${CASL_P4EST_DIR}" ]]; then
    echo "The parent directory is not valid: are you sure you are running the script in the example folder of the casl_p4est repository?"
    exit 1
  fi

  if [[ -z "${CASL_P4EST_USER}" ]]; then
    echo "ERROR: The environment variable CASL_P4EST_USER is undefined."
    echo "CASL_P4EST_USER needs to be defined and to refer to the basename of an environment-specific file in ${CASL_P4EST_DIR}/qmake."
    exit 1
  elif [[ ! -d "${CASL_P4EST_DIR}/qmake" ]]; then
    echo "ERROR: the qmake directory ${CASL_P4EST_DIR}/qmake cannot be found..."
    echo "Are you sure CASL_P4EST_DIR=${CASL_P4EST_DIR} is correct?"
    exit 1
  elif [[ ! -f "${CASL_P4EST_DIR}/qmake/${CASL_P4EST_USER}.pri" ]]; then
    echo "ERROR: the environment-specific file ${CASL_P4EST_DIR}/qmake/${CASL_P4EST_USER}.pri does not exist."
    echo "Please create it by executing ./new_environment in ${CASL_P4EST_DIR}/qmake, first."
    exit 1
  fi

  # create a new example only if one does not exist with the same name
  if [[ -e $name ]]; then
    cd $name
    if [[ ! -e $name.pro ]]; then
      create_pro $name $CASL_P4EST_DIR
    else
      echo "ERROR: Profile '$name.pro' already exists. Please choose another name."
      exit 1
    fi

    if [[ ! -e $name.pri ]]; then
      create_pri $name
    else
      echo "The source list '$name.pri' already exists: please check if it is valid."
    fi
  else
    echo "ERROR: Example '$name' does not exist. Please create it by executing \"./newexample $name\" first or choose an existing example."
    exit 1
  fi
fi


