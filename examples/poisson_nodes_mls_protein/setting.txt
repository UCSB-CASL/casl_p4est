// manual configuration
case 19:
{
#ifdef P4_TO_P8
    // 3D parameters
    static std::vector<double> radii = {0.15, 0.15, 0.15, 0.15};
    static std::vector<double> x_centers = {-0.5, -0.5, 0.5, 0.5};
    static std::vector<double> y_centers = {-0.4, 0.4, -0.4, 0.4};
    static std::vector<double> z_centers = {0.0, 0.0, 0.0, 0.0};  // Added for 3D
    static multi_circle_domain_t circles(radii, x_centers, y_centers, z_centers, 0.0, -1.0);
#else
    // 2D parameters
    static std::vector<double> radii = {0.15, 0.15, 0.15, 0.15};
    static std::vector<double> x_centers = {-0.5, -0.5, 0.5, 0.5};
    static std::vector<double> y_centers = {-0.4, 0.4, -0.4, 0.4};
    static multi_circle_domain_t circles(radii, x_centers, y_centers, 0.0, -1.0);
#endif

    switch (what) {
        _CODE( case VAL: return circles.phi(DIM(x, y, z)) );
        XCODE( case DDX: return circles.phi_x(DIM(x, y, z)) );
        YCODE( case DDY: return circles.phi_y(DIM(x, y, z)) );
        ZCODE( case DDZ: return circles.phi_z(DIM(x, y, z)) );
    }
} break;

case 20:
{
#ifdef P4_TO_P8
    // 3D parameters
    static std::vector<double> radii = {0.25, 0.25, 0.25, 0.25};
    static std::vector<double> x_centers = {-0.3, -0.3, 0.3, 0.3};
    static std::vector<double> y_centers = {-0.4, 0.4, -0.4, 0.4};
    static std::vector<double> z_centers = {0.0, 0.0, 0.0, 0.0};  // Added for 3D
    static multi_circle_domain_t circles(radii, x_centers, y_centers, z_centers, 0.0, -1.0);
#else
    // 2D parameters
    static std::vector<double> radii = {0.25, 0.25, 0.25, 0.25};
    static std::vector<double> x_centers = {-0.3, -0.3, 0.3, 0.3};
    static std::vector<double> y_centers = {-0.4, 0.4, -0.4, 0.4};
    static multi_circle_domain_t circles(radii, x_centers, y_centers, 0.0, -1.0);
#endif

    switch (what) {
        _CODE( case VAL: return circles.phi(DIM(x, y, z)) );
        XCODE( case DDX: return circles.phi_x(DIM(x, y, z)) );
        YCODE( case DDY: return circles.phi_y(DIM(x, y, z)) );
        ZCODE( case DDZ: return circles.phi_z(DIM(x, y, z)) );
    }
} break;