#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""

TO READ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Created on Fri Apr 26 13:12:20 2024

@author: Vincent POITIER

The code is commented to have an idea of what it is doing

LOOK FOR CAPITAL COMMANDS -  THOSE ARE THE THINGS YOU NEED TO ADAPT TO YOUR CASE
.CSV FILES ARE CREATED WITH THE 'SAVE DATA' BUTTON ON PARAVIEW 

THIS PYTHON CODE GOES ALONG THE TEST CSV FILE AS AN EXAMPLE "test_file_for_plot_porous_media_python.csv"

"""

# Basic Imports
import matplotlib.pyplot as plt  # Library for plotting
from mpl_toolkits import mplot3d  # Toolkit for 3D plotting
import numpy as np  # Library for numerical computations
from pylab import figure, cm  # Library for creating figures and colormaps
plt.rcParams.update({
     "text.usetex": True,  # Use LaTeX for text rendering
     "font.family": "Computer Modern"})  # Set font family to Computer Modern
import scipy as sp  # Library for scientific computing
from scipy.interpolate import griddata  # Interpolation of scattered data
from numpy import linalg as LA  # Linear algebra functions
from matplotlib.animation import FuncAnimation  # Animation support for matplotlib
import scipy.linalg as splinalg  # Linear algebra routines
np.set_printoptions(formatter={'float': '{:.4g}'.format})  # Set print format for numpy arrays

import pandas as pd  # Library for data manipulation

# Load data from CSV file - ENTER THE PATH TO YOUR CSV FILE GENERATED BY PARAVIEW
data = pd.read_csv("/home/elyce/workspace/CASL/simulation_output/porous_media/Vincent-Code/test_file_for_plot_porous_media_python.csv")

# Extract necessary data columns from the loaded data - MODIFY IT, HERE I GET THE GEOMETRY (PHI) and the FLUID VELOCITY NORM WHICH IS NOT INCLUDED INTO THE CSV FILE, YOU CAN CALCULATE IT WITH EXCEL/LIBREOFFICE
x = data["Position:0"]  # X positions
y = data["Position:1"]  # Y positions
z = data["phi"]  # Phi values
mag = data["fluidmag"]  # Fluid velocity norm - NEEDS TO BE CALCULATED AND NAMED 'fluidmag' IN  YOUR .CSV
conc = data["Tl"]  # Concentration values

# Mask concentration values where phi is non-positive
masked_conc = np.where(z < 0, conc, np.nan)

num_points = int(1e3)  # Number of points for grid creation
# Create grid based on the range of X and Y positions
x_min, x_max = np.min(x), np.max(x)
y_min, y_max = np.min(y), np.max(y)
x_grid, y_grid = np.linspace(x_min, x_max, num_points), np.linspace(y_min, y_max, num_points)
X, Y = np.meshgrid(x_grid, y_grid)  # Create meshgrid for X and Y positions

# Interpolate Z values onto the grid
Z = griddata((x, y), z, (X, Y), method='linear')  # Interpolate phi values
fig, ax = plt.subplots()  # Create a new figure and axis
# Plot contour lines of phi at the zero level
cntr1 = ax.contour(X, Y, Z, levels=[0], colors='k', linewidth=5)


# PLOT CONCENTRATION

# Interpolate masked concentration values onto the grid
Concentration = griddata((x, y), masked_conc, (X, Y), method='linear')

# Generate contour levels for concentration values
contour_levels = np.linspace(np.nanmin(Concentration), np.nanmax(Concentration), num_points)
# Plot filled contour plot for concentration values
plt.contourf(X, Y, Concentration, cmap='jet', levels=contour_levels)

# Create color bar for concentration with smoother levels
cbar = plt.colorbar(label='Concentration', extend='both', ticks=np.linspace(np.nanmin(Concentration), np.nanmax(Concentration), 6), orientation='vertical')

# Turn off axis ticks and labels
plt.xticks([])  # Remove x-axis ticks and labels
plt.yticks([])  # Remove y-axis ticks and labels

# Set axis spines visibility to True to keep the box around the plot
plt.gca().spines['top'].set_visible(True)
plt.gca().spines['right'].set_visible(True)
plt.gca().spines['bottom'].set_visible(True)
plt.gca().spines['left'].set_visible(True)

# Set axis spine linewidths
plt.gca().spines['top'].set_linewidth(1.5)
plt.gca().spines['right'].set_linewidth(1.5)
plt.gca().spines['bottom'].set_linewidth(1.5)
plt.gca().spines['left'].set_linewidth(1.5)

plt.gca().set_aspect('equal')  # Set aspect ratio to equal
plt.show()  # Display the plot


fig, ax2 = plt.subplots()
# VELOCITY NORM
masked_velocity = np.where(z < 0, mag, np.nan)
# Interpolate masked concentration values onto the grid
NORM_vel = griddata((x, y), masked_velocity, (X, Y), method='linear')

# Generate contour levels for concentration values
contour_levels = np.linspace(np.nanmin(NORM_vel), np.nanmax(NORM_vel), num_points)
# Plot filled contour plot for concentration values
plt.contourf(X, Y, NORM_vel, cmap='inferno', levels=contour_levels)

# Create color bar for concentration with smoother levels
cbar = plt.colorbar(label='Velocity Mag', extend='both', ticks=np.linspace(np.nanmin(NORM_vel), np.nanmax(NORM_vel), 6), orientation='vertical')

# Turn off axis ticks and labels
plt.xticks([])  # Remove x-axis ticks and labels
plt.yticks([])  # Remove y-axis ticks and labels

# Set axis spines visibility to True to keep the box around the plot
plt.gca().spines['top'].set_visible(True)
plt.gca().spines['right'].set_visible(True)
plt.gca().spines['bottom'].set_visible(True)
plt.gca().spines['left'].set_visible(True)

# Set axis spine linewidths
plt.gca().spines['top'].set_linewidth(1.5)
plt.gca().spines['right'].set_linewidth(1.5)
plt.gca().spines['bottom'].set_linewidth(1.5)
plt.gca().spines['left'].set_linewidth(1.5)

plt.gca().set_aspect('equal')  # Set aspect ratio to equal
plt.show()  # Display the plot





