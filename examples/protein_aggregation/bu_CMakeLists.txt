cmake_minimum_required( VERSION 3.19 )
set( CMAKE_CXX_STANDARD 17 )
set(CMAKE_BUILD_TYPE Debug)

project(SIMOND VERSION 1.0)
configure_file(SIMONDConfig.h.in SIMONDConfig.h)

# SIMOND library root directory.
set( SIMOND_DIR ${CMAKE_CURRENT_SOURCE_DIR}/ )
include_directories(
	${SIMOND_DIR}/src
	${SIMOND_DIR}/include
)

file(GLOB SOURCE_FILES
	"${SIMOND_DIR}/include/*.h"
	"${SIMOND_DIR}/include/*.hpp"
	"${SIMOND_DIR}/src/*.cpp"
	"${SIMOND_DIR}/src/*.c"
        )
add_executable(${PROJECT_NAME} ${SOURCE_FILES})

target_include_directories(${PROJECT_NAME} PUBLIC ${PROJECT_BINARY_DIR})

######################## Execution mode ########################

# Checking mode: Created by visiting CLion | Preferences | Build, Execution, Deployment | CMake
# Based on https://intellij-support.jetbrains.com/hc/en-us/community/posts/360000919039-Clion-how-to-build-cmake-to-support-debug-release
message( "" )
if( CMAKE_BUILD_TYPE MATCHES Debug )
	message( "******* CMAKE IN DEBUG MODE *******" )
	set( PETSC_DIR $ENV{PETSC_DEBUG_DIR} )	# PETSc directory for debug mode.
	set( P4EST_DIR $ENV{p4est_LIBRARY} )		# p4est directory for debug mode.

	add_compile_definitions( PRIVATE DEBUG )		# Enable debug macro.
elseif( CMAKE_BUILD_TYPE MATCHES Release )
	message( "******* CMAKE IN RELEASE MODE *******" )
	set( PETSC_DIR $ENV{PETSC_RELEASE_DIR} )				# PETSc directory for release mode.
	set( P4EST_DIR $ENV{p4est_LIBRARY} )			# p4est directory for release mode.
endif()
message( "** Loading PETSc from: " ${PETSC_DIR} )
message( "** Loading p4est from: " ${P4EST_DIR} )
message( "" )


######################## Compiler custom flags and settings ########################
# Compilers.
set( CMAKE_C_COMPILER mpicc )
set( CMAKE_CXX_COMPILER mpicxx )

# Optimization flags.  Comment these out when using debugger.
#set( GCC_COVERAGE_COMPILE_FLAGS "-O2 -O3 -march=native" )
#set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}" )
#set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}" )


######################## Loading libraries ########################
# These commands must be given prior to defining any target.

# OpenMP flags.
# See http://blog.llvm.org/2015/05/openmp-support_22.html
find_package( OpenMP )
if( OPENMP_FOUND )
	set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}" )
	set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" )
endif()

# JSON library.
#find_package( nlohmann_json CONFIG REQUIRED )

find_package( MPI REQUIRED )		# Not needed if using mpich rather than openmpi.
#find_package( Boost COMPONENTS filesystem REQUIRED )


# Library linking directories.
link_directories(
		/usr/lib
		${PETSC_DIR}/lib
		${P4EST_DIR}/lib
		/home/mistani/packages/openmpi-install/lib
		/usr/lib/llvm-10/lib/
		/usr/local/cuda-11.5/targets/x86_64-linux/lib
		/usr/lib/x86_64-linux-gnu/ )

link_libraries(
		mpi
		petsc
		p4est
		sc
		voro++
		omp
		openblas
		dlib
		${Boost_FILESYSTEM_LIBRARY} )

include_directories(
		.
		${PETSC_DIR}/include
		${P4EST_DIR}/include
		/home/mistani/packages/openmpi-install/include
		/usr/lib/llvm-10/include
		/usr/local/OpenBlas/include
		/usr/include
		/usr/local/cuda-11.5/targets/x86_64-linux/include
		${Boost_INCLUDE_DIR} )


################################################

